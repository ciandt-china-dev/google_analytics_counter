<?php

/**
 * @file
 * Basic functions for this module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\google_analytics_counter\Library\GoogleAnalyticsCounterFeed;
use Drupal\Component\Utility;

/**
 * Load the necessary include files.
 */
module_load_include('inc', 'google_analytics_counter', 'google_analytics_counter_data');

/**
 * Implements hook_views_api().
 * @Todo upgrade
 */
function google_analytics_counter_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'google_analytics_counter') . '/views',
  );
}

/**
 * Implements hook_help().
 */
function google_analytics_counter_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.google_analytics_counter':
      $output = file_get_contents(drupal_get_path('module', 'google_analytics_counter') . '/README.txt');;
      return nl2br($output);
  }
}

/**
 * Implements hook_filter_info().
 * @Todo upgrade
 */
function google_analytics_counter_filter_info() {
  $filters = array();
  $filters['filter_google_analytics_counter'] = array(
    'title' => t('Google Analytics Counter tag'),
    'description' => t('Substitutes a special Google Analytics Counter tag [gac|...] with the actual content.'),
    'prepare callback' => 'google_analytics_counter_filter_google_analytics_counter_prepare',
    'process callback' => 'google_analytics_counter_filter_google_analytics_counter_process',
    //'tips callback' => '_filter_example_filter_time_tips',
  );
  return $filters;
}

/**
 * Implements hook_filter_FILTER_prepare().
 * @Todo upgrade
 */
function google_analytics_counter_filter_google_analytics_counter_prepare($text, $filter) {
  return $text;
}

/**
 * Implements hook_filter_FILTER_process().
 * @Todo upgrade
 */
function google_analytics_counter_filter_google_analytics_counter_process($text, $filter) {
  $text = replace_google_analytics_counter_tags($text);
  return $text;
}

/**
 * Finds [gac|...] tags and replaces them by actual values.
 */
function replace_google_analytics_counter_tags($str) {
  // [gac|path/to/page]

  $matchlink = '';
  $orig_match = '';
  $matches = '';
  preg_match_all("/(\[)gac[^\]]*(\])/s", $str, $matches); // This allows more than one pipe sign (|) ... does not hurt and leaves room for possible extension.

  foreach ($matches[0] as $match) {

    // Keep original value.
    $orig_match[] = $match;

    // Remove wrapping [].
    $match = substr($match, 1, (strlen($match) - 2));

    // Create an array of parameter attributions.
    $match = explode("|", $match);

    $path = trim(SafeMarkup::checkPlain(@$match[1]));

    /* So now we can display the count based on the path.
     * If no path was defined, the function will detect the current page's count.
     */
    $matchlink[] = google_analytics_counter_display($path);
  }

  $str = str_replace($orig_match, $matchlink, $str);
  return $str;
}

/**
 * Displays the count.
 */
function google_analytics_counter_display($path = '') {
  if ($path == '') {
    // We need a path that includes the language prefix, if any. E.g. en/my/path (of /en/my/path - the initial slash will be dealt with later).
    $path = parse_url("http://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]", PHP_URL_PATH); // @TODO: Works OK on non-Apache servers?
  }
  // Check all paths, to be sure.
  //$path = check_plain($path);

  $block_content = '';
  $block_content .= '<span class="google-analytics-counter">';
  $count = google_analytics_counter_get_sum_per_path($path);
  if ($count == '') {
    // If unknown, for some reason.
    $block_content .= 0; // Better than t('N/A').
  }
  else {
    $block_content .= $count;
  }
  $block_content .= '</span>';

  return $block_content;
}


/**
 * Implements hook_cron().
 *
 */
function google_analytics_counter_cron() {
  // Set a watchdog error if there is no Google Analytics profile enabled.
  // It's a weak test but better than none.
  $config = \Drupal::config('google_analytics_counter.settings');
  if ($config->get('google_analytics_counter.profile_id') == ''
  ) {
    $url = Url::fromRoute('google_analytics_counter.admin_auth_form');
    $text = Link::fromTextAndUrl(t('authenticate here'), $url);

    \Drupal::logger(t('Google Analytics Counter')->render())->error(
      t('No Google Analytics profile has been authenticated!
      Google Analytics Counter can not fetch any new data. Please ' .
        $text->toString()->getGeneratedLink() . '.')->render()
    );
    return;
  }

  // Defaults to an hourly interval. Of course, cron has to be running at least hourly for this to work.
  $interval = 60 * $config->get('google_analytics_counter.cron_interval'); // $interval must contain value in seconds.
  // We don't want to act every time cron runs (which could be every minute) so keep a time for the next run in a variable.
  if (REQUEST_TIME >= $config->get('google_analytics_counter.cron_next_execution')) {
    // Important to set it before the job because if they take long and there is another cron triggered...
    \Drupal::configFactory()
      ->getEditable('google_analytics_counter.settings')
      ->set('google_analytics_counter.cron_next_execution', REQUEST_TIME + $interval)
      ->save();

    // Retrieve path with counts from Google Analytics into a local table.
    google_analytics_counter_update_path_counts();
    // Now also update the storage table from the local table with the GA data.
    google_analytics_counter_update_storage();
  }

}


/**
 * Instantiate a new GoogleAnalyticsCounterFeed object.
 *
 * @return object
 *   GoogleAnalyticsCounterFeed object to authorize access and request data
 *   from the Google Analytics Core Reporting API.
 */
function google_analytics_counter_new_gafeed() {
  $config = \Drupal::config('google_analytics_counter.settings');
  $configEdit = \Drupal::configFactory()
    ->getEditable('google_analytics_counter.settings');
  if ($config->get('google_analytics_counter.access_token')
    && time() < $config->get('google_analytics_counter.expires_at')
  ) {
    // If the access token is still valid, return an authenticated GAFeed.
    return new GoogleAnalyticsCounterFeed($config->get('google_analytics_counter.access_token'));
  }
  elseif ($config->get('google_analytics_counter.refresh_token')
  ) {
    // If the site has an access token and refresh token, but the access
    // token has expired, authenticate the user with the refresh token.
    $client_id = $config->get('google_analytics_counter.client_id');
    $client_secret = $config->get('google_analytics_counter.client_secret');
    $refresh_token = $config->get('google_analytics_counter.refresh_token');

    try {
      $gafeed = new GoogleAnalyticsCounterFeed();
      $gafeed->refreshToken($client_id, $client_secret, $refresh_token);
      $configEdit->set('google_analytics_counter.access_token', $gafeed->access_token)
        ->set('google_analytics_counter.expires_at', $gafeed->expires_at)
        ->save();
      return $gafeed;
    } catch (Exception $e) {
      drupal_set_message(t("There was an authentication error. Message: " . $e->getMessage()), 'error', FALSE);
      return NULL;
    }
  }
  elseif (isset($_GET['code'])) {
    // If there is no access token or refresh token and client is returned
    // to the config page with an access code, complete the authentication.
    $client_id = $config->get('google_analytics_counter.client_id');
    $client_secret = $config->get('google_analytics_counter.client_secret');
    $redirect_uri = $config->get('google_analytics_counter.redirect_uri');

    try {
      $gafeed = new GoogleAnalyticsCounterFeed();
      $gafeed->finishAuthentication($client_id, $client_secret, $redirect_uri);

      $configEdit->set('google_analytics_counter.access_token', $gafeed->access_token)
        ->set('google_analytics_counter.expires_at', $gafeed->expires_at)
        ->set('google_analytics_counter.refresh_token', $gafeed->refresh_token)
        ->save();
      $configEdit->clear('google_analytics_counter.redirect_uri')
        ->save();
      drupal_set_message(t('You have been successfully authenticated.'), 'status', FALSE);
      $redirect = new RedirectResponse($redirect_uri);
      $redirect->send();
    } catch (Exception $e) {
      drupal_set_message(t("There was an authentication error. Message: " . $e->getMessage()), 'error', FALSE);
      return NULL;
    }
  }
  else {
    return NULL;
  }
}

/**
 * Sets the expiry timestamp for cached queries.
 * Default is 1 day.
 * @return The UNIX timestamp to expire the query at.
 */
function google_analytics_counter_cache_time() {
  return time() + \Drupal::config('google_analytics_counter.settings')
    ->get('google_analytics_counter.cache_length');
}

/**
 * Convert seconds to hours, minutes and seconds.
 */
function google_analytics_counter_sec2hms($sec, $padHours = FALSE) {

  // start with a blank string
  $hms = "";

  // do the hours first: there are 3600 seconds in an hour, so if we divide
  // the total number of seconds by 3600 and throw away the remainder, we're
  // left with the number of hours in those seconds
  $hours = intval(intval($sec) / 3600);

  // add hours to $hms (with a leading 0 if asked for)
  $hms .= ($padHours)
    ? str_pad($hours, 2, "0", STR_PAD_LEFT) . "h "
    : $hours . "h ";

  // dividing the total seconds by 60 will give us the number of minutes
  // in total, but we're interested in *minutes past the hour* and to get
  // this, we have to divide by 60 again and then use the remainder
  $minutes = intval(($sec / 60) % 60);

  // add minutes to $hms (with a leading 0 if needed)
  $hms .= str_pad($minutes, 2, "0", STR_PAD_LEFT) . "m ";

  // seconds past the minute are found by dividing the total number of seconds
  // by 60 and using the remainder
  $seconds = intval($sec % 60);

  // add seconds to $hms (with a leading 0 if needed)
  $hms .= str_pad($seconds, 2, "0", STR_PAD_LEFT);

  // done!
  return $hms . 's';
}
